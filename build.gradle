buildscript {
    repositories {
        maven {
            name = 'Minecraft Forge'
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            name = 'Gradle'
            url = 'https://plugins.gradle.org/m2/'
        }
        maven {
            name = 'Sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.+"
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: parchment, version: parchment_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'Jared\'s Maven'
        url = 'https://maven.blamejared.com/'
    }
    maven {
        name = 'Curios'
        url = 'https://maven.theillusivec4.top/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly group:'org.spongepowered', name:'mixin', version:'0.8.5'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Botania and Patchouli
    implementation fg.deobf("vazkii.botania:Botania:${botania_version}")
    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // Curios
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            // Minecraft
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,

            // Forge
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,

            // Mod
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description,

            // Dependencies
            botania_version: botania_version,
            botania_version_range: botania_version_range,
            patchouli_version: patchouli_version,
            patchouli_version_range: patchouli_version_range,
            curios_version: curios_version,
            curios_version_range: curios_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
